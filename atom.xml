<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>昨日晴空</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://isk.ink/"/>
  <updated>2020-06-16T07:17:29.849Z</updated>
  <id>http://isk.ink/</id>
  
  <author>
    <name>Asakiii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【算法】韩信点兵</title>
    <link href="http://isk.ink/2020/06/15/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E9%9F%A9%E4%BF%A1%E7%82%B9%E5%85%B5/"/>
    <id>http://isk.ink/2020/06/15/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E9%9F%A9%E4%BF%A1%E7%82%B9%E5%85%B5/</id>
    <published>2020-06-15T14:12:40.000Z</published>
    <updated>2020-06-16T07:17:29.849Z</updated>
    
    <content type="html"><![CDATA[<p>  相传韩信才智过人，从不直接清点自己军队的人数，只要让士兵先后以三人一排，五人一排，七人一排地变换队形，而他每次只掠一眼队伍的排尾就知道总人数了。输入包括多组数据，每组数据包含3个非负整数a，b，c，表示每种队形排尾的人数（a&lt;3,b&lt;5,c&lt;7）,输出总人数的最小值（或报告无解）。以知总人数不小于10，不超过100.</p><p>输入到文件结束为止。</p><p>样例输入：</p><p>2 1 6</p><p>2 1 3</p><p>样例输出：</p><p>Case 1: 41</p><p>Case 2: No answer</p><p>代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  int a,b,c,kase&#x3D;0;</span><br><span class="line"></span><br><span class="line">  int flag&#x3D;1;</span><br><span class="line"></span><br><span class="line">  while(scanf(&quot;%d&quot;,&amp;a)&#x3D;&#x3D;1)&#123;</span><br><span class="line"></span><br><span class="line">   scanf(&quot;%d&quot;,&amp;b);</span><br><span class="line"></span><br><span class="line">   scanf(&quot;%d&quot;,&amp;c);</span><br><span class="line"></span><br><span class="line">​    int i&#x3D;10;</span><br><span class="line"></span><br><span class="line">​    for(i;i&lt;100;i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​    if(i%3&#x3D;&#x3D;a&amp;&amp;i%5&#x3D;&#x3D;b&amp;&amp;i%7&#x3D;&#x3D;c)&#123;</span><br><span class="line"></span><br><span class="line">​      printf(&quot;Case %d :%d\n&quot;,++kase,i);</span><br><span class="line"></span><br><span class="line">​      flag&#x3D;0;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    if(flag)</span><br><span class="line"></span><br><span class="line">​    printf(&quot;No answer.\n&quot;);</span><br><span class="line"></span><br><span class="line">​    flag&#x3D;1;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码实现：</p><p>方法二:C++</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> int x,y,z,m,c&#x3D;0;</span><br><span class="line"></span><br><span class="line"> while(scanf(&quot;%d %d %d&quot;,&amp;x,&amp;y,&amp;z))</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">  c++;</span><br><span class="line"></span><br><span class="line">  m&#x3D;x*70+y*21+z*15;</span><br><span class="line"></span><br><span class="line">  while(m&gt;105)</span><br><span class="line"></span><br><span class="line">  m&#x3D;m-105;</span><br><span class="line"></span><br><span class="line">  if(m&gt;&#x3D;10&amp;&amp;m&lt;&#x3D;100)printf(&quot;Case %d:%d\n&quot;,c,m);</span><br><span class="line"></span><br><span class="line">  else</span><br><span class="line"></span><br><span class="line">  printf(&quot;Case %d:No answer\n&quot;,c);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  相传韩信才智过人，从不直接清点自己军队的人数，只要让士兵先后以三人一排，五人一排，七人一排地变换队形，而他每次只掠一眼队伍的排尾就知道总人数了。输入包括多组数据，每组数据包含3个非负整数a，b，c，表示每种队形排尾的人数（a&amp;lt;3,b&amp;lt;5,c&amp;lt;7）,输出
      
    
    </summary>
    
    
      <category term="算法" scheme="http://isk.ink/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://isk.ink/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>清除office历史版本密钥</title>
    <link href="http://isk.ink/2020/06/12/%E6%B8%85%E9%99%A4office%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E5%AF%86%E9%92%A5/"/>
    <id>http://isk.ink/2020/06/12/%E6%B8%85%E9%99%A4office%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E5%AF%86%E9%92%A5/</id>
    <published>2020-06-12T13:24:55.000Z</published>
    <updated>2020-06-12T14:03:35.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>昨天使用word时，好奇去输入了产品密钥，结果有问题，产品也没激活，导致每次使用Word或者</p><p>Excle时都会弹出激活向导。特别烦，我都把注册表删了，它居然还有。我有家庭版的office，已经激活了。但是上次输入激活密钥的那个版本的激活向导一直都在，输入了正版的密钥也没用。</p><p>采用了网上的大多解决方法，大多采用激活工具。但是我的电脑用不了就很无奈。而且大多激活工具不正规，也不能说没用，反正我的没用。而且百度流传的大多方法早就失效了。不过在我逛了一下午各个论坛后还是找到了一种更简单的方法。不用下载任何软件直接删一些东西就好，原来激活的office不会受影响。</p><h2 id="找到密钥所在位置"><a href="#找到密钥所在位置" class="headerlink" title="找到密钥所在位置"></a>找到密钥所在位置</h2><ol><li><p>开始运行命令提示符。在小娜的搜索框内输入cmd，或者win+R键输入cmd</p></li><li><p>输入cd..两次退到C盘目录下，再输入cd C:\Program Files(X86)\Microsoft Office\Office16 。注意cd 和C:...之间有个空格。每个人装Office的位置可能不一样找到你的安装位置复制粘贴过来就好</p></li><li><p>在输入：cscript OSPP.VBS /dstatus  。<strong>注意空格位置</strong></p></li><li><p>看是否会出现几个类似于KHGM9的密钥。</p></li><li><p>然后输入</p><p> cscript  ospp.vbs /unpkey:KHGM9</p><p>cscript ospp.vbs /unpkey:KHGM9</p><p>cscript ospp.vbs /unpkey:G83KT</p><p>cscript ospp.vbs /unpkey:G83KT</p><p>当然每个人的密钥都不太一样，我也忘了当时我试了几个反正都删了就对了</p></li></ol><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200612215849.png" alt=""></p><p>全删完之后基本问题就解决了。</p><p>最好还是用正版或者淘宝买的盗版。网上免费的密钥简直有毒，也不排除有些真的能用，一旦不能用，那么每次打开Word或其他office软件都会弹出软件激活向导。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;昨天使用word时，好奇去输入了产品密钥，结果有问题，产品也没激活，导致每次使用Word或者&lt;/p&gt;
&lt;p&gt;Excle时都会弹出激活向导。特
      
    
    </summary>
    
    
      <category term="windows" scheme="http://isk.ink/categories/windows/"/>
    
    
      <category term="office" scheme="http://isk.ink/tags/office/"/>
    
  </entry>
  
  <entry>
    <title> Linux常用命令大全</title>
    <link href="http://isk.ink/2020/06/09/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://isk.ink/2020/06/09/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2020-06-09T03:05:37.000Z</published>
    <updated>2020-06-09T03:16:02.192Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Linux常用命令大全（非常全！！！）</strong></p><p>最近都在和Linux打交道，感觉还不错。我觉得Linux相比windows比较麻烦的就是很多东西都要用命令来控制，当然，这也是很多人喜欢linux的原因，比较短小但却功能强大。我将我了解到的命令列举一下，仅供大家参考：</p><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a><strong>系统信息</strong></h2><p>arch 显示机器的处理器架构<br>uname -m 显示机器的处理器架构<br>uname -r 显示正在使用的内核版本<br>dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)<br>hdparm -i /dev/hda 罗列一个磁盘的架构特性<br>hdparm -tT /dev/sda 在磁盘上执行测试性读取操作<br>cat /proc/cpuinfo 显示CPU info的信息<br>cat /proc/interrupts 显示中断<br>cat /proc/meminfo 校验内存使用<br>cat /proc/swaps 显示哪些swap被使用<br>cat /proc/version 显示内核的版本<br>cat /proc/net/dev 显示网络适配器及统计<br>cat /proc/mounts 显示已加载的文件系统<br>lspci -tv 罗列 PCI 设备<br>lsusb -tv 显示 USB 设备<br>date 显示系统日期<br>cal 2007 显示2007年的日历表<br>date 041217002007.00 设置日期和时间 - 月日时分年.秒<br>clock -w 将时间修改保存到 BIOS </p><h2 id="关机-系统的关机、重启以及登出"><a href="#关机-系统的关机、重启以及登出" class="headerlink" title="关机 (系统的关机、重启以及登出 )"></a><strong>关机 (系统的关机、重启以及登出 )</strong></h2><p>shutdown -h now 关闭系统<br>init 0 关闭系统<br>telinit 0 关闭系统<br>shutdown -h hours:minutes &amp; 按预定时间关闭系统<br>shutdown -c 取消按预定时间关闭系统<br>shutdown -r now 重启<br>reboot 重启<br>logout 注销 </p><h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a><strong>文件和目录</strong></h2><p>cd /home 进入 ‘/ home’ 目录’<br>cd .. 返回上一级目录<br>cd ../.. 返回上两级目录<br>cd 进入个人的主目录<br>cd ~user1 进入个人的主目录<br>cd - 返回上次所在的目录<br>pwd 显示工作路径<br>ls 查看目录中的文件<br>ls -F 查看目录中的文件<br>ls -l 显示文件和目录的详细资料<br>ls -a 显示隐藏文件<br>ls <em>[0-9]</em> 显示包含数字的文件名和目录名<br>tree 显示文件和目录由根目录开始的树形结构<br>lstree 显示文件和目录由根目录开始的树形结构<br>mkdir dir1 创建一个叫做 ‘dir1’ 的目录’<br>mkdir dir1 dir2 同时创建两个目录<br>mkdir -p /tmp/dir1/dir2 创建一个目录树<br>rm -f file1 删除一个叫做 ‘file1’ 的文件’<br>rmdir dir1 删除一个叫做 ‘dir1’ 的目录’<br>rm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容<br>rm -rf dir1 dir2 同时删除两个目录及它们的内容<br>mv dir1 new_dir 重命名/移动 一个目录<br>cp file1 file2 复制一个文件<br>cp dir/* . 复制一个目录下的所有文件到当前工作目录<br>cp -a /tmp/dir1 . 复制一个目录到当前工作目录<br>cp -a dir1 dir2 复制一个目录<br>ln -s file1 lnk1 创建一个指向文件或目录的软链接<br>ln file1 lnk1 创建一个指向文件或目录的物理链接<br>touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)<br>file file1 outputs the mime type of the file as text<br>iconv -l 列出已知的编码<br>iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.<br>find . -maxdepth 1 -name *.jpg -print -exec convert “{}” -resize 80x60 “thumbs/{}” ; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick) </p><h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a><strong>文件搜索</strong></h2><p>find / -name file1 从 ‘/‘ 开始进入根文件系统搜索文件和目录<br>find / -user user1 搜索属于用户 ‘user1’ 的文件和目录<br>find /home/user1 -name *.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件<br>find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件<br>find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件<br>find / -name *.rpm -exec chmod 755 ‘{}’ ; 搜索以 ‘.rpm’ 结尾的文件并定义其权限<br>find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备<br>locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令<br>whereis halt 显示一个二进制文件、源码或man的位置<br>which halt 显示一个二进制文件或可执行文件的完整路径 </p><h2 id="挂载一个文件系统"><a href="#挂载一个文件系统" class="headerlink" title="挂载一个文件系统"></a><strong>挂载一个文件系统</strong></h2><p>mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 ‘/ mnt/hda2’ 已经存在<br>umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 ‘/ mnt/hda2’ 退出<br>fuser -km /mnt/hda2 当设备繁忙时强制卸载<br>umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用<br>mount /dev/fd0 /mnt/floppy 挂载一个软盘<br>mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom<br>mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom<br>mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom<br>mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件<br>mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统<br>mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备<br>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享 </p><h2 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a><strong>磁盘空间</strong></h2><p>df -h 显示已经挂载的分区列表<br>ls -lSr |more 以尺寸大小排列文件和目录<br>du -sh dir1 估算目录 ‘dir1’ 已经使用的磁盘空间’<br>du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小<br>rpm -q -a –qf ‘%10{SIZE}t%{NAME}n’ | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)<br>dpkg-query -W -f=’${Installed-Size;10}t${Package}n’ | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统) </p><h2 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a><strong>用户和群组</strong></h2><p>groupadd group_name 创建一个新用户组<br>groupdel group_name 删除一个用户组<br>groupmod -n new_group_name old_group_name 重命名一个用户组<br>useradd -c “Name Surname “ -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 “admin” 用户组的用户<br>useradd user1 创建一个新用户<br>userdel -r user1 删除一个用户 ( ‘-r’ 排除主目录)<br>usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性<br>passwd 修改口令<br>passwd user1 修改一个用户的口令 (只允许root执行)<br>chage -E 2005-12-31 user1 设置用户口令的失效期限<br>pwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户<br>grpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组<br>newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组 </p><h2 id="文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a><strong>文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</strong></h2><p>ls -lh 显示权限<br>ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示<br>chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限<br>chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限<br>chown user1 file1 改变一个文件的所有人属性<br>chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性<br>chgrp group1 file1 改变文件的群组<br>chown user1:group1 file1 改变一个文件的所有人和群组属性<br>find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件<br>chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限<br>chmod u-s /bin/file1 禁用一个二进制文件的 SUID位<br>chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的<br>chmod g-s /home/public 禁用一个目录的 SGID 位<br>chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件<br>chmod o-t /home/public 禁用一个目录的 STIKY 位 </p><h2 id="文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a><strong>文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消</strong></h2><p>chattr +a file1 只允许以追加方式读写文件<br>chattr +c file1 允许这个文件能被内核自动压缩/解压<br>chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件<br>chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接<br>chattr +s file1 允许一个文件被安全地删除<br>chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘<br>chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件<br>lsattr 显示特殊的属性 </p><h2 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a><strong>打包和压缩文件</strong></h2><p>bunzip2 file1.bz2 解压一个叫做 ‘file1.bz2’的文件<br>bzip2 file1 压缩一个叫做 ‘file1’ 的文件<br>gunzip file1.gz 解压一个叫做 ‘file1.gz’的文件<br>gzip file1 压缩一个叫做 ‘file1’的文件<br>gzip -9 file1 最大程度压缩<br>rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包<br>rar a file1.rar file1 file2 dir1 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’<br>unrar x file1.rar 解压rar包<br>tar -cvf archive.tar file1 创建一个非压缩的 tarball<br>tar -cvf archive.tar file1 file2 dir1 创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件<br>tar -tf archive.tar 显示一个包中的内容<br>tar -xvf archive.tar 释放一个包<br>tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下<br>tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包<br>tar -jxvf archive.tar.bz2 解压一个bzip2格式的压缩包<br>tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包<br>tar -zxvf archive.tar.gz 解压一个gzip格式的压缩包<br>zip file1.zip file1 创建一个zip格式的压缩包<br>zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包<br>unzip file1.zip 解压一个zip格式压缩包 </p><h2 id="RPM-包-（Fedora-Redhat及类似系统）"><a href="#RPM-包-（Fedora-Redhat及类似系统）" class="headerlink" title="RPM 包 - （Fedora, Redhat及类似系统）"></a><strong>RPM 包 - （Fedora, Redhat及类似系统）</strong></h2><p>rpm -ivh package.rpm 安装一个rpm包<br>rpm -ivh –nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告<br>rpm -U package.rpm 更新一个rpm包但不改变其配置文件<br>rpm -F package.rpm 更新一个确定已经安装的rpm包<br>rpm -e package_name.rpm 删除一个rpm包<br>rpm -qa 显示系统中所有已经安装的rpm包<br>rpm -qa | grep httpd 显示所有名称中包含 “httpd” 字样的rpm包<br>rpm -qi package_name 获取一个已安装包的特殊信息<br>rpm -qg “System Environment/Daemons” 显示一个组件的rpm包<br>rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表<br>rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表<br>rpm -q package_name –whatrequires 显示与一个rpm包存在依赖关系的列表<br>rpm -q package_name –whatprovides 显示一个rpm包所占的体积<br>rpm -q package_name –scripts 显示在安装/删除期间所执行的脚本l<br>rpm -q package_name –changelog 显示一个rpm包的修改历史<br>rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供<br>rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表<br>rpm –import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书<br>rpm –checksig package.rpm 确认一个rpm包的完整性<br>rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性<br>rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间<br>rpm -Va 检查系统中所有已安装的rpm包- 小心使用<br>rpm -Vp package.rpm 确认一个rpm包还未安装<br>rpm2cpio package.rpm | cpio –extract –make-directories <em>bin</em> 从一个rpm包运行可执行文件<br>rpm -ivh /usr/src/redhat/RPMS/<code>arch</code>/package.rpm 从一个rpm源码安装一个构建好的包<br>rpmbuild –rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包 </p><h2 id="YUM-软件包升级器-（Fedora-RedHat及类似系统）"><a href="#YUM-软件包升级器-（Fedora-RedHat及类似系统）" class="headerlink" title="YUM 软件包升级器 - （Fedora, RedHat及类似系统）"></a><strong>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</strong></h2><p>yum install package_name 下载并安装一个rpm包<br>yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系<br>yum update package_name.rpm 更新当前系统中所有安装的rpm包<br>yum update package_name 更新一个rpm包<br>yum remove package_name 删除一个rpm包<br>yum list 列出当前系统中安装的所有包<br>yum search package_name 在rpm仓库中搜寻软件包<br>yum clean packages 清理rpm缓存删除下载的包<br>yum clean headers 删除所有头文件<br>yum clean all 删除所有缓存的包和头文件 </p><h2 id="DEB-包-Debian-Ubuntu-以及类似系统"><a href="#DEB-包-Debian-Ubuntu-以及类似系统" class="headerlink" title="DEB 包 (Debian, Ubuntu 以及类似系统)"></a><strong>DEB 包 (Debian, Ubuntu 以及类似系统)</strong></h2><p>dpkg -i package.deb 安装/更新一个 deb 包<br>dpkg -r package_name 从系统删除一个 deb 包<br>dpkg -l 显示系统中所有已经安装的 deb 包<br>dpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包<br>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息<br>dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表<br>dpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表<br>dpkg -S /bin/ping 确认所给的文件由哪个deb包提供 </p><h2 id="APT-软件工具-Debian-Ubuntu-以及类似系统"><a href="#APT-软件工具-Debian-Ubuntu-以及类似系统" class="headerlink" title="APT 软件工具 (Debian, Ubuntu 以及类似系统)"></a><strong>APT 软件工具 (Debian, Ubuntu 以及类似系统)</strong></h2><p>apt-get install package_name 安装/更新一个 deb 包<br>apt-cdrom install package_name 从光盘安装/更新一个 deb 包<br>apt-get update 升级列表中的软件包<br>apt-get upgrade 升级所有已安装的软件<br>apt-get remove package_name 从系统删除一个deb包<br>apt-get check 确认依赖的软件仓库正确<br>apt-get clean 从下载的软件包中清理缓存<br>apt-cache search searched-package 返回包含所要搜索字符串的软件包名称 </p><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a><strong>查看文件内容</strong></h2><p>cat file1 从第一个字节开始正向查看文件的内容<br>tac file1 从最后一行开始反向查看一个文件的内容<br>more file1 查看一个长文件的内容<br>less file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作<br>head -2 file1 查看一个文件的前两行<br>tail -2 file1 查看一个文件的最后两行<br>tail -f /var/log/messages 实时查看被添加到一个文件中的内容 </p><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a><strong>文本处理</strong></h2><p>cat file1 file2 … | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT<br>cat file1 | command( sed, grep, awk, grep, etc…) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中<br>cat file1 | command( sed, grep, awk, grep, etc…) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中<br>grep Aug /var/log/messages 在文件 ‘/var/log/messages’中查找关键词”Aug”<br>grep ^Aug /var/log/messages 在文件 ‘/var/log/messages’中查找以”Aug”开始的词汇<br>grep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行<br>grep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug”<br>sed ‘s/stringa1/stringa2/g’ example.txt 将example.txt文件中的 “string1” 替换成 “string2”<br>sed ‘/^$/d’ example.txt 从example.txt文件中删除所有空白行<br>sed ‘/ <em>#/d; /^$/d’ example.txt 从example.txt文件中删除所有注释和空白行<br>echo ‘esempio’ | tr ‘[:lower:]’ ‘[:upper:]’ 合并上下单元格内容<br>sed -e ‘1d’ result.txt 从文件example.txt 中排除第一行<br>sed -n ‘/stringa1/p’ 查看只包含词汇 “string1”的行<br>sed -e ‘s/ *$//‘ example.txt 删除每一行最后的空白字符<br>sed -e ‘s/stringa1//g’ example.txt 从文档中只删除词汇 “string1” 并保留剩余全部<br>sed -n ‘1,5p;5q’ example.txt 查看从第一行到第5行内容<br>sed -n ‘5p;5q’ example.txt 查看第5行<br>sed -e ‘s/00</em>/0/g’ example.txt 用单个零替换多个零<br>cat -n file1 标示文件的行数<br>cat example.txt | awk ‘NR%2==1’ 删除example.txt文件中的所有偶数行<br>echo a b c | awk ‘{print $1}’ 查看一行第一栏<br>echo a b c | awk ‘{print $1,$3}’ 查看一行的第一和第三栏<br>paste file1 file2 合并两个文件或两栏的内容<br>paste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用”+”区分<br>sort file1 file2 排序两个文件的内容<br>sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)<br>sort file1 file2 | uniq -u 删除交集，留下其他的行<br>sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)<br>comm -1 file1 file2 比较两个文件的内容只删除 ‘file1’ 所包含的内容<br>comm -2 file1 file2 比较两个文件的内容只删除 ‘file2’ 所包含的内容<br>comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分 </p><h2 id="字符设置和文件格式转换"><a href="#字符设置和文件格式转换" class="headerlink" title="字符设置和文件格式转换"></a><strong>字符设置和文件格式转换</strong></h2><p>dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX<br>unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS<br>recode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html<br>recode -l | more 显示所有允许的转换格式 </p><h2 id="文件系统分析"><a href="#文件系统分析" class="headerlink" title="文件系统分析"></a><strong>文件系统分析</strong></h2><p>badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块<br>fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性<br>fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br>e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br>e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br>fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br>fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性<br>fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性<br>dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 </p><h2 id="初始化一个文件系统"><a href="#初始化一个文件系统" class="headerlink" title="初始化一个文件系统"></a><strong>初始化一个文件系统</strong></h2><p>mkfs /dev/hda1 在hda1分区创建一个文件系统<br>mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统<br>mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统<br>mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统<br>fdformat -n /dev/fd0 格式化一个软盘<br>mkswap /dev/hda3 创建一个swap文件系统 </p><h2 id="SWAP文件系统"><a href="#SWAP文件系统" class="headerlink" title="SWAP文件系统"></a><strong>SWAP文件系统</strong></h2><p>mkswap /dev/hda3 创建一个swap文件系统<br>swapon /dev/hda3 启用一个新的swap文件系统<br>swapon /dev/hda2 /dev/hdb3 启用两个swap分区 </p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a><strong>备份</strong></h2><p>dump -0aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的完整备份<br>dump -1aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的交互式备份<br>restore -if /tmp/home0.bak 还原一个交互式备份<br>rsync -rogpav –delete /home /tmp 同步两边的目录<br>rsync -rogpav -e ssh –delete /home ip_address:/tmp 通过SSH通道rsync<br>rsync -az -e ssh –delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录<br>rsync -az -e ssh –delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录<br>dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr ‘dd of=hda.gz’ 通过ssh在远程主机上执行一次备份本地磁盘的操作<br>dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件<br>tar -Puf backup.tar /home/user 执行一次对 ‘/home/user’ 目录的交互式备份操作<br>( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr ‘cd /home/share/ &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个目录内容<br>( tar c /home ) | ssh -C user@ip_addr ‘cd /home/backup-home &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个本地目录<br>tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接<br>find /home/user1 -name ‘<em>.txt’ | xargs cp -av –target-directory=/home/backup/ –parents 从一个目录查找并复制所有以 ‘.txt’ 结尾的文件到另一个目录<br>find /var/log -name ‘</em>.log’ | tar cv –files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 ‘.log’ 结尾的文件并做成一个bzip包<br>dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作<br>dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容 </p><h2 id="光盘"><a href="#光盘" class="headerlink" title="光盘"></a><strong>光盘</strong></h2><p>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容<br>mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件<br>mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件<br>mkisofs -J -allow-leading-dots -R -V “Label CD” -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件<br>cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件<br>gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件<br>mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件<br>cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中<br>cd-paranoia – “-3” 从一个CD光盘转录音轨到 wav 文件中（参数-3）<br>cdrecord –scanbus 扫描总线以识别scsi通道<br>dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD </p><h2 id="网络-（以太网和WIFI无线）"><a href="#网络-（以太网和WIFI无线）" class="headerlink" title="网络 - （以太网和WIFI无线）"></a><strong>网络 - （以太网和WIFI无线</strong>）</h2><p>ifconfig eth0 显示一个以太网卡的配置<br>ifup eth0 启用一个 ‘eth0’ 网络设备<br>ifdown eth0 禁用一个 ‘eth0’ 网络设备<br>ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址<br>ifconfig eth0 promisc 设置 ‘eth0’ 成混杂模式以嗅探数据包 (sniffing)<br>dhclient eth0 以dhcp模式启用 ‘eth0’<br>route -n show routing table<br>route add -net 0/0 gw IP_Gateway configura default gateway<br>route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network ‘192.168.0.0/16’<br>route del 0/0 gw IP_gateway remove static route<br>echo “1” &gt; /proc/sys/net/ipv4/ip_forward activate ip routing<br>hostname show hostname of system<br>host <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> lookup hostname to resolve name to ip address and viceversa<br>nslookup <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> lookup hostname to resolve name to ip address and viceversa<br>ip link show show link status of all interfaces<br>mii-tool eth0 show link status of ‘eth0’<br>ethtool eth0 show statistics of network card ‘eth0’<br>netstat -tup show all active network connections and their PID<br>netstat -tupl show all network services listening on the system and their PID<br>tcpdump tcp port 80 show all HTTP traffic<br>iwlist scan show wireless networks<br>iwconfig eth1 show configuration of a wireless network card<br>hostname show hostname<br>host <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> lookup hostname to resolve name to ip address and viceversa<br>nslookup <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> lookup hostname to resolve name to ip address and viceversa<br>whois <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> lookup on Whois database </p><h2 id="JPS工具"><a href="#JPS工具" class="headerlink" title="JPS工具"></a><strong>JPS工具</strong></h2><p>jps(Java Virtual Machine Process Status Tool)是JDK 1.5提供的一个显示当前所有java进程pid的命令，简单实用，非常适合在linux/unix平台上简单察看当前java进程的一些简单情况。</p><p>  我想很多人都是用过unix系统里的ps命令，这个命令主要是用来显示当前系统的进程情况，有哪些进程，及其 id。 jps 也是一样，它的作用是显示当前系统的java进程情况，及其id号。我们可以通过它来查看我们到底启动了几个java进程（因为每一个java程序都会独占一个java虚拟机实例），和他们的进程号（为下面几个程序做准备），并可通过opt来查看这些进程的详细启动参数。</p><p>   <strong>使用方法：在当前命令行下打 jps(需要JAVA_HOME，没有的话，到改程序的目录下打) 。</strong></p><p><strong>jps存放在JAVA_HOME/bin/jps，使用时为了方便请将JAVA_HOME/bin/加入到Path.</strong></p><p>$&gt; <strong>jps</strong><br>23991 Jps<br>23789 BossMain<br>23651 Resin</p><p>比较常用的参数：</p><p><strong>-q 只显示pid，不显示class名称,jar文件名和传递给main 方法的参数</strong><br>$&gt; <strong>jps -q</strong><br>28680<br>23789<br>23651</p><p><strong>-m 输出传递给main 方法的参数，在嵌入式jvm上可能是null</strong></p><p>$&gt; <strong>jps -m</strong><br>28715 Jps -m<br>23789 BossMain<br>23651 Resin -socketwait 32768 -stdout /data/aoxj/resin/log/stdout.log -stderr /data/aoxj/resin/log/stderr.log</p><p><strong>-l 输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名</strong></p><p>$&gt; <strong>jps -l</strong><br>28729 sun.tools.jps.Jps<br>23789 com.asiainfo.aimc.bossbi.BossMain<br>23651 com.caucho.server.resin.Resin</p><p><strong>-v 输出传递给JVM的参数</strong></p><p>$&gt; <strong>jps -v</strong><br>23789 BossMain<br>28802 Jps -Denv.class.path=/data/aoxj/bossbi/twsecurity/java/trustwork140.jar:/data/aoxj/bossbi/twsecurity/java/:/data/aoxj/bossbi/twsecurity/java/twcmcc.jar:/data/aoxj/jdk15/lib/rt.jar:/data/aoxj/jd</p><p>k15/lib/tools.jar -Dapplication.home=/data/aoxj/jdk15 -Xms8m<br>23651 Resin -Xss1m -Dresin.home=/data/aoxj/resin -Dserver.root=/data/aoxj/resin -Djava.util.logging.manager=com.caucho.log.LogManagerImpl -</p><p>Djavax.management.builder.initial=com.caucho.jmx.MBeanServerBuilderImpl</p><p><strong>sudo jps看到的进程数量最全</strong></p><p><strong>jps 192.168.0.77</strong></p><p><strong>列出远程服务器192.168.0.77机器所有的jvm实例，采用rmi协议，默认连接端口为1099</strong></p><p><strong>（前提是远程服务器提供jstatd服务）</strong></p><p><strong>注：jps命令有个地方很不好，似乎只能显示当前用户的java进程，要显示其他用户的还是只能用unix/linux的ps命令。</strong></p><p>详细情况请参考sun官方文档。<br><a href="http://java.sun.com/j2se/1.5.0/docs/tooldocs/share/jps.html" target="_blank" rel="noopener">http://java.sun.com/j2se/1.7.0/docs/tooldocs/share/jps.html</a></p><p>转自：<a href="https://www.cnblogs.com/yjd_hycf_space/p/7730690.html" target="_blank" rel="noopener">https://www.cnblogs.com/yjd_hycf_space/p/7730690.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Linux常用命令大全（非常全！！！）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近都在和Linux打交道，感觉还不错。我觉得Linux相比windows比较麻烦的就是很多东西都要用命令来控制，当然，这也是很多人喜欢linux的原因，比较短小但却功能强大。我将我了解
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://isk.ink/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://isk.ink/tags/Linux/"/>
    
      <category term="命令" scheme="http://isk.ink/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】Linux系统C环境编程</title>
    <link href="http://isk.ink/2020/05/31/%E3%80%90Linux%E3%80%91Linux%E7%B3%BB%E7%BB%9FC%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B/"/>
    <id>http://isk.ink/2020/05/31/%E3%80%90Linux%E3%80%91Linux%E7%B3%BB%E7%BB%9FC%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B/</id>
    <published>2020-05-31T03:09:59.000Z</published>
    <updated>2020-06-09T03:03:20.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h1><p> clear                     清洁屏幕<br>cd ~                       进入家目录<br>pwd                        查看当前位置<br>ls -l                        查看目录下文件和权限<br>touch 文件名        创建文件<br>rm 文件名             删除文件<br>mkdir 文件夹名    创建文件夹<br>vim 文件名 </p><h2 id="Vim命令"><a href="#Vim命令" class="headerlink" title="Vim命令"></a>Vim命令</h2><p>i                                进入插入模式</p><p>ESC                          退出插入模式</p><p>:w                             保存<br>:q                              退出vim编辑<br>Shift+i                       到行首插入<br>Shift+a                     到行尾插入<br>o                               到下一行插入<br>Shift +o                    到当前行上一行插入<br>x                                删除<br>dd                             删除行<br>:sp  文件名                          打开多个文件<br>Ctrl+w+下箭头       打开多文件后跳转下面的代码<br>:set nu                    打开行号<br>9  dd                       下九行就被放入剪切板<br>p                              贴入剪切板的内容<br>:wqa                        所有文件都保存和退出</p><h2 id="多个源文件分而治之"><a href="#多个源文件分而治之" class="headerlink" title="多个源文件分而治之"></a>多个源文件分而治之</h2><p>:sp 文件名      创建并打开文件</p><p>Ctrl+w+箭头    打开多个文件后跳转下面的代码</p><p>:set nu             打开行号</p><p>9 dd                    光标下九行剪切</p><p>p                           贴入剪切板的内容</p><p>:wqa                     所有文件都保存和退出</p><p>./a.out                运行a.out 可执行的文件</p><p>gcc a.c                    使用gcc 编译器生成a.c可执行文件</p><p>gcc   a.c b.c  -o  mian.out             使用GCC编译器运行两个文件生成main.out可执行文件</p><p>./ main.out             运行main.out可执行文件  </p><p>特殊可以在a.c的头文件下用   #Include“b.c”拼两个文件  例如gcc b.c    把a.c 和b.c 合并生成可执行文件</p><p>运行可执行文件能得到两个文件拼起来的效果</p><h2 id="头文件与函数定义分离"><a href="#头文件与函数定义分离" class="headerlink" title="头文件与函数定义分离"></a>头文件与函数定义分离</h2><p>gcc -c max.c - o max.o            编译max.c 保存在max.o 里(max.o为机器能读懂的语言，运行时省时间，节省CPU性能)</p><p>cp     max.c     min.c                    拷贝文件max.c,拷贝后的文件名为min.c</p><p>cat 文件名                                    查看源文件代码</p><p>vim max.h                                 写入int main （int a, int b);在b.c中可以直接调用#include” max.h“</p><p><u>.h文件作用，，，？</u><em>实际上很多函数及结构体的定义是完全可以放在.c里面的，只不过当项目文件多的时候会不利于阅读和理解之前的代码，所以分开放，把一些定义之类的放到.h文件中,可以类比于stdio.h</em></p><h1 id="makFile的编写"><a href="#makFile的编写" class="headerlink" title="makFile的编写"></a>makFile的编写</h1><p>用于较多文件时，整理编译 </p><p>rm *.o             删除所有的文件名.o的文件（慎用，上次手滑输入成了rm *.c写的代码都没了）</p><p>vi Makefile       创建Makefile文件 （M大写）</p><p>在Makefile中  以#开头为注释，会被忽略。</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200531191703.png" alt="image-20200531191657295"></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200531191751.png" alt="image-20200531191751688"></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200531191827.png" alt="image-20200531191827905"></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200531191855.png" alt="image-20200531191855012"></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200531191922.png" alt="image-20200531191921944"></p><h2 id="main函数中的return"><a href="#main函数中的return" class="headerlink" title="main函数中的return"></a>main函数中的return</h2><p>gcc main.c -o main.out &amp;&amp; ./main.out   直接编译运行，&amp;&amp;前的执行成功后执行后面的命令</p><p>执行完后 输入 echo $?   如果输出0，则说明程序正常执行</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200601003023.png" alt="image-20200601003017302"></p><h2 id="标准输入流输出流以及错误流"><a href="#标准输入流输出流以及错误流" class="headerlink" title="标准输入流输出流以及错误流"></a>标准输入流输出流以及错误流</h2><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200601201225.png" alt="image-20200601201219301"></p><p>./a.out  &gt;&gt; a.txt       将用户的操作记录在a.txt里，追加</p><p>./a.out   &gt;  a.txt        将用户的操作记录在a.txt里 ，替换</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200601224136.png" alt="image-20200601221054150"></p><p>./a.out   &lt; input.txt 输入用户的操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-命令&quot;&gt;&lt;a href=&quot;#Linux-命令&quot; class=&quot;headerlink&quot; title=&quot;Linux 命令&quot;&gt;&lt;/a&gt;Linux 命令&lt;/h1&gt;&lt;p&gt; clear                     清洁屏幕&lt;br&gt;cd ~       
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://isk.ink/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://isk.ink/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【C】C语言复习</title>
    <link href="http://isk.ink/2020/05/28/%E3%80%90C%E3%80%91C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/"/>
    <id>http://isk.ink/2020/05/28/%E3%80%90C%E3%80%91C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-05-28T10:41:25.000Z</published>
    <updated>2020-06-05T02:15:47.609Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200528184647.jpg" alt="img"></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200528185049.jpg" alt="img"></p><p>如果要输出多个变量的并指定变量的位置时候，格式符还可以连用，变量之间需要用逗号隔开，如：</p><p>​       <img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200528185136.jpg" alt="img"></p><ul><li><p>整型常量：13、0、-13；</p></li><li><p>实型常量：13.33、-24.4；</p></li><li><p>字符常量：‘a’、‘M’</p></li><li><p>字符串常量：”I love imooc!”</p></li><li><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200528185502.jpg" alt="img"></p><p>在使用强制转换时应注意以下问题：</p><p>1、<strong>数据类型和表达式都必须加括号</strong>，如把(int)(x/2+y)写成(int)x/2+y则成了把x转换成int型之后再除2再与y相加了。</p><p>2、转换后不会改变原数据的类型及变量值，只在本次运算中<strong>临时性转换</strong>。</p><p>3、强制转换后的运算结果<strong>不遵循四舍五入原则</strong>。</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200528191727.jpg" alt="img"></p><p>运行结果</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200528191739.jpg" alt="img"></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200528192636.jpg" alt="img"></p><p>C语言中的三目运算符：“?:”，其格式为：</p><p> <strong>表达式1 ? 表达式2 : 表达式3;</strong> </p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200605101539.png" alt="image-20200605095528458"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200528184647.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src
      
    
    </summary>
    
    
      <category term="C语言" scheme="http://isk.ink/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://isk.ink/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【效率】搜索引擎的 “语法”</title>
    <link href="http://isk.ink/2020/05/27/%E3%80%90%E6%95%88%E7%8E%87%E3%80%91%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84-%E2%80%9C%E8%AF%AD%E6%B3%95%E2%80%9D/"/>
    <id>http://isk.ink/2020/05/27/%E3%80%90%E6%95%88%E7%8E%87%E3%80%91%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84-%E2%80%9C%E8%AF%AD%E6%B3%95%E2%80%9D/</id>
    <published>2020-05-27T11:18:03.000Z</published>
    <updated>2020-06-09T03:03:56.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排除关键词"><a href="#排除关键词" class="headerlink" title="排除关键词"></a>排除关键词</h2><p>减号+关键词</p><p>功能是：排除一些不想要的关键词</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200527192322.png" alt="image-20200527192322538"></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200527192346.png" alt="image-20200527192346272"></p><h2 id="精确搜索"><a href="#精确搜索" class="headerlink" title="精确搜索"></a>精确搜索</h2><p>关键词加引号</p><p>功能：只搜索引号里的字（中文引号没用，只有英文引号才行</p><h2 id="指定网站内搜索"><a href="#指定网站内搜索" class="headerlink" title="指定网站内搜索"></a>指定网站内搜索</h2><p>site:域名和关键词之间加一个空格</p><p>功能：在指定网站内搜索（例 所有内容都来源于知乎）</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200527193731.png" alt="image-20200527193731219"></p><h2 id="指定文件格式"><a href="#指定文件格式" class="headerlink" title="指定文件格式"></a>指定文件格式</h2><p>filetype:文件格式+关键词（空格）</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200527195931.png" alt="image-20200527195737188"></p><h2 id="指定标题搜索"><a href="#指定标题搜索" class="headerlink" title="指定标题搜索"></a>指定标题搜索</h2><p>intitle:关键词</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200527200204.png" alt="image-20200527200204341"></p><h2 id="指定范围搜索"><a href="#指定范围搜索" class="headerlink" title="指定范围搜索"></a>指定范围搜索</h2><p>格式类似</p><p>小米 intext:苹果</p><p>或allintext:编译原理 计算机组成原理 数据结构与算法分析</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200527200520.png" alt="image-20200527200503302"></p><p>或 inurl:cnki.net(即搜索来源域名都包括cnki.net)</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200527200715.png" alt="image-20200527200715426"></p><h2 id="叠加使用"><a href="#叠加使用" class="headerlink" title="叠加使用"></a>叠加使用</h2><p>site:douban.com 亲密关系 intext:罗兰米勒</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;排除关键词&quot;&gt;&lt;a href=&quot;#排除关键词&quot; class=&quot;headerlink&quot; title=&quot;排除关键词&quot;&gt;&lt;/a&gt;排除关键词&lt;/h2&gt;&lt;p&gt;减号+关键词&lt;/p&gt;
&lt;p&gt;功能是：排除一些不想要的关键词&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loadi
      
    
    </summary>
    
    
      <category term="Google" scheme="http://isk.ink/categories/Google/"/>
    
    
      <category term="效率" scheme="http://isk.ink/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】</title>
    <link href="http://isk.ink/2020/05/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://isk.ink/2020/05/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-05-23T02:50:46.000Z</published>
    <updated>2020-06-04T13:53:06.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>InitList(&amp;L):初始化表。构造一个空的线性表。</p><p> DestroyList(&amp;L):销毁线性表，并释放线性表L所占用的内存空间。</p><p> LocateElem(L,e):按值查找操作。在表中L查找具有给定关键字值得元素。</p><p>GetElem(L,i):按位查找操作。在表中L中第i个位置的元素的值。</p><p>Listlnsert(&amp;L,I,e):插入操作。删除表L中的第i个位置的元素，并用e返回删除元素的值。</p><p>PrintList(L):输出操作。按前后顺序输出线性表L的所有元素值。</p><p>Empty(L):判断操作。按前后顺序输出线性表L的所有元素值。</p><p>Empty(L):判空操作。若L为空表，则返回TRUE，否则返回FALSE.</p><p>Length(L):求表长。返回线性表L的长度，即L中数据元素的个数。</p><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><p>数组静态分配                                  <code>#define  MaxSize=50</code></p><p>​                                                              <code>typedef struct{</code></p><p>​                                                                    <code>ElemType data[MaxSize];</code></p><p>​                                                                <code>int length;</code></p><p>​                                                                         <code>}SqList;</code></p><p>数组动态分配                             <code>#define  MaxSize=50</code></p><p>​                                                              <code>typedef struct{</code></p><p>​                                                                    <code>ElemType *data;</code></p><p>​                                                                <code>int length;</code></p><p>​                                                                         <code>}SqList;</code></p><p>动态分配语句</p><p>​     C                            <code>L.data = (Elemtype*)malloc(sizeof(ElemType)**InitSize);</code></p><p>​     C++                        <code>L.data = new ElemType[initSize];</code></p><h2 id="顺序表上基本操作的实现"><a href="#顺序表上基本操作的实现" class="headerlink" title="顺序表上基本操作的实现"></a>顺序表上基本操作的实现</h2><p><u>bool表示插入成功返回ture，插入失败返回false；int i表示插入位置,i表示顺序表的表号而非数组表号；SqList表示引用顺序表L;</u>插入（删除）e  表示ElemType &amp;e</p><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a><strong>插入操作</strong></h3><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200524173827.png" alt="QQ图片20200524170924"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool ListInsert(SqList &amp;L, int i,ElemType &amp;e)&#123;</span><br><span class="line">     if (i&lt;||i&gt;L.length+1)</span><br><span class="line">        return false;</span><br><span class="line">     if (L.length&gt;&#x3D;MaxSize)</span><br><span class="line">        return false;</span><br><span class="line">     for(int j&#x3D;L.length;j&gt;&#x3D;i;j--)</span><br><span class="line">        L.date[j]&#x3D;L.data[j-1];</span><br><span class="line">    L.data[i-1]&#x3D;e;</span><br><span class="line">    L.length++;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bool ListDelete(SqList &amp;L, int i,ElemType &amp;e)&#123;</span><br><span class="line">     if (i&lt;||i&gt;L.length)</span><br><span class="line">        return false;</span><br><span class="line">    e&#x3D;L.data[i-1];</span><br><span class="line">    for(int j&#x3D;i; j&lt;L.length;j++)</span><br><span class="line">       L.data[j-1]&#x3D;data[j];</span><br><span class="line">       L.length--;</span><br><span class="line">       return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int LocateElem(SqList L, ElemTyoe e)&#123;</span><br><span class="line">     int i;</span><br><span class="line">     for (i&#x3D;0;i&lt;L.length ; i++)</span><br><span class="line">         if (L.data[i]&#x3D;&#x3D;e)</span><br><span class="line">            return  i+1;</span><br><span class="line">     return 0;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;p&gt;InitList(&amp;amp;L):初始化表。构造一个空的线性表。&lt;/p&gt;
&lt;p&gt; DestroyList(&amp;amp;L):销毁线性表
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://isk.ink/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://isk.ink/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title> 【vscode】vscode配置</title>
    <link href="http://isk.ink/2020/05/16/vscode%E9%85%8D%E7%BD%AE/"/>
    <id>http://isk.ink/2020/05/16/vscode%E9%85%8D%E7%BD%AE/</id>
    <published>2020-05-16T15:34:48.000Z</published>
    <updated>2020-06-09T03:04:29.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="首先，去微软官方下载vscode"><a href="#首先，去微软官方下载vscode" class="headerlink" title="首先，去微软官方下载vscode"></a>首先，去微软官方下载vscode</h2><p>vscode官网</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145231.png" alt=""></p><h2 id="然后需要下载C-C-的编译器即mingw"><a href="#然后需要下载C-C-的编译器即mingw" class="headerlink" title="然后需要下载C/C++的编译器即mingw"></a>然后需要下载C/C++的编译器即mingw</h2><p>下载网址：<a href="http://mingw.org/" target="_blank" rel="noopener">http://mingw.org/</a></p><p>进入后下滑</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145258.png" alt=""></p><p>点击如下图位置</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145313.png" alt=""></p><p>在这里插入图片描述</p><p>我加载了一些项目，仅供参考</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145417.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145428.jpg" alt=""></p><h2 id="加载完之后需要将bin目录添加到环境变量里面去"><a href="#加载完之后需要将bin目录添加到环境变量里面去" class="headerlink" title="加载完之后需要将bin目录添加到环境变量里面去"></a>加载完之后需要将bin目录添加到环境变量里面去</h2><p>步骤如下：<br>找到MingW的bin目录</p><p>​          C:\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0\mingw64\bin</p><p>​       <img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145443.png" alt=""></p><p>打开控制面板-&gt;系统和安全-&gt;系统     <!--回收站--此电脑--右键--属性--------></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145453.png" alt=""></p><p>点击更改设置-&gt;高级-&gt;环境变量-&gt;找到path-&gt;点击编辑-&gt;点击新建<br>然后将bin路径添加进去</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145503.png" alt=""></p><h2 id="添加完成就开始配置VScode"><a href="#添加完成就开始配置VScode" class="headerlink" title="添加完成就开始配置VScode"></a>添加完成就开始配置VScode</h2>   <!--先下载中文插件比如下图的第二第三个插件你必须下载--><p>在扩展商店中搜索C/C++，下载人数最多的那个就是</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145515.png" alt="">下载完成之后新建文件夹，就是你以后编程的地方，然后设置为工作区（在文件项里）</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145531.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145545.jpg" alt=""></p><p>写一个helloworld在里面</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145553.jpg" alt=""></p><p>随便保存了一个名字</p><p>点击调试，选择gdb</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145601.jpg" alt=""></p><p>自动生成了如下文件</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200520111304.jpg" alt=""></p><p>将里面的配置直接换成如下内容</p><p>(下面是我的代码，其中你要修改一点)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;配置是使用的大佬的配置，源地址：https:&#x2F;&#x2F;blog.csdn.net&#x2F;bat67&#x2F;article&#x2F;details&#x2F;76095813</span><br><span class="line">&#x2F;&#x2F;配置是使用的大佬的配置，源地址：https:&#x2F;&#x2F;blog.csdn.net&#x2F;bat67&#x2F;article&#x2F;details&#x2F;76095813</span><br><span class="line">&#x2F;&#x2F;配置是使用的大佬的配置，源地址：https:&#x2F;&#x2F;blog.csdn.net&#x2F;bat67&#x2F;article&#x2F;details&#x2F;76095813</span><br><span class="line">&#x2F;&#x2F;自己稍微做了一点修改</span><br><span class="line">&#123;  </span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,  </span><br><span class="line">    &quot;configurations&quot;: [  </span><br><span class="line">        &#123;  </span><br><span class="line">            &quot;name&quot;: &quot;C++ Launch (GDB)&quot;, &#x2F;&#x2F; 配置名称，将会在启动配置的下拉菜单中显示  </span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,       &#x2F;&#x2F; 配置类型，这里只能为cppdbg  </span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,    &#x2F;&#x2F; 请求配置类型，可以为launch（启动）或attach（附加）  </span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;&#x2F;$&#123;fileBasenameNoExtension&#125;.exe&quot;,&#x2F;&#x2F; 将要进行调试的程序的路径  </span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,    &#x2F;&#x2F; 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out</span><br><span class="line">                &quot;$&#123;fileDirname&#125;&#x2F;$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span><br><span class="line">                &quot;-g&quot;,    &#x2F;&#x2F; 生成和调试有关的信息</span><br><span class="line">                &quot;-Wall&quot;, &#x2F;&#x2F; 开启额外警告</span><br><span class="line">                &quot;-static-libgcc&quot;,     &#x2F;&#x2F; 静态链接libgcc，一般都会加上</span><br><span class="line">                &quot;-fexec-charset&#x3D;GBK&quot;, &#x2F;&#x2F; 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码</span><br><span class="line">                &#x2F;&#x2F; &quot;-std&#x3D;c11&quot;, &#x2F;&#x2F; C++最新标准为c++17，或根据自己的需要进行修改</span><br><span class="line">            ], &#x2F;&#x2F; 编译的命令，其实相当于VSC帮你在终端中输了这些东西],             &#x2F;&#x2F; 程序调试时传递给程序的命令行参数，一般设为空即可  </span><br><span class="line">            &quot;stopAtEntry&quot;: false,   &#x2F;&#x2F; 设为true时程序将暂停在程序入口处，一般设置为false  </span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;, &#x2F;&#x2F; 调试程序时的工作目录，一般为$&#123;workspaceFolder&#125;即代码所在目录  </span><br><span class="line">            &quot;environment&quot;: [],  </span><br><span class="line">            &quot;externalConsole&quot;: true, &#x2F;&#x2F; 调试时是否显示控制台窗口，一般设置为true显示控制台  </span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,  </span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;C:\\mingw-w64\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\mingw64\\bin\\gdb.exe&quot;, &#x2F;&#x2F; miDebugger的路径，注意这里要与MinGw的路径对应  </span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;g++&quot;, &#x2F;&#x2F; 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc  </span><br><span class="line">            &quot;setupCommands&quot;: [  </span><br><span class="line">                &#123;   </span><br><span class="line">    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,  </span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,  </span><br><span class="line">                    &quot;ignoreFailures&quot;: true  </span><br><span class="line">                &#125;  </span><br><span class="line">            ]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面 <code>&quot;miDebuggerPath&quot;: &quot;C:\\mingw-w64\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\mingw64\\bin\\gdb.exe&quot;,</code>你要把它改成自己的mingw-w64的位置，<strong>注意斜杠双斜杠直接复制会有问题的</strong></p><p>再次点击调试（F5)</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200520111313.jpg" alt=""></p><p>然后依次点击下图</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200520111349.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200520111417.jpg" alt=""></p><p>生成如图文件</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145831.jpg" alt=""></p><p>全删掉换成我的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;配置是使用的大佬的配置，源地址：https:&#x2F;&#x2F;blog.csdn.net&#x2F;bat67&#x2F;article&#x2F;details&#x2F;76095813</span><br><span class="line">&#x2F;&#x2F;配置是使用的大佬的配置，源地址：https:&#x2F;&#x2F;blog.csdn.net&#x2F;bat67&#x2F;article&#x2F;details&#x2F;76095813</span><br><span class="line">&#x2F;&#x2F;配置是使用的大佬的配置，源地址：https:&#x2F;&#x2F;blog.csdn.net&#x2F;bat67&#x2F;article&#x2F;details&#x2F;76095813</span><br><span class="line">&#x2F;&#x2F;自己稍微做了一点修改</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; See https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkId&#x3D;733558 </span><br><span class="line">    &#x2F;&#x2F; for the documentation about the tasks.json format</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;label&quot;: &quot;g++&quot;, &#x2F;&#x2F;这里注意一下，见下文</span><br><span class="line">            &quot;command&quot;: &quot;C:\\mingw-w64\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\mingw64\\bin\\g++.exe&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;options&quot;: &#123;</span><br><span class="line">                &quot;cwd&quot;: &quot;C:\\mingw-w64\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\mingw64\\bin&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;problemMatcher&quot;: [</span><br><span class="line">                &quot;$gcc&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>&quot;command&quot;: &quot;C:\\mingw-w64\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\mingw64\\bin\\g++.exe&quot;,</code>和<code>&quot;cwd&quot;: &quot;C:\\mingw-w64\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\mingw64\\bin&quot;</code></p><p>是你要修改的地址换成你mingw的安装地址，</p><p>最后再次按F5,就成功了。</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145842.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h2 id=&quot;首先，去微软官方下载vscode&quot;&gt;&lt;a href=&quot;#首先，去微软官方下载vscode&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="VScode" scheme="http://isk.ink/categories/VScode/"/>
    
    
      <category term="VS code" scheme="http://isk.ink/tags/VS-code/"/>
    
  </entry>
  
  <entry>
    <title>【生活】泡茶的技巧</title>
    <link href="http://isk.ink/2020/05/16/%E3%80%90%E7%94%9F%E6%B4%BB%E3%80%91%E6%B3%A1%E8%8C%B6%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
    <id>http://isk.ink/2020/05/16/%E3%80%90%E7%94%9F%E6%B4%BB%E3%80%91%E6%B3%A1%E8%8C%B6%E7%9A%84%E6%8A%80%E5%B7%A7/</id>
    <published>2020-05-16T06:20:59.000Z</published>
    <updated>2020-06-09T03:04:15.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="茶茶茶"><a href="#茶茶茶" class="headerlink" title="茶茶茶"></a>茶茶茶</h3><p>在twitter上看到的日本网友分享的泡茶方法：</p><p>​      在小茶壶中放入茶叶和冰块（冰块代替水），放入冰箱冷藏一晚（注意不是冷冻）</p><p>这样泡出来的茶非常好喝，你能够100%感受到茶叶的甜味。泡茶的水越烫，</p><p>茶叶就越苦，按这种方法泡的茶味道很浓而且澄澈好喝。</p><p><strong>扩展一下</strong></p><p>抹茶粉也是同样的方法，不过冷藏后需要搅拌一下，毕竟抹茶粉沉底了。</p><p>这里贴一下我在宿舍自己做抹茶的配方   <!--外面卖的太贵，味道还没我自己做的好喝--></p><p>产考量 ：500ml一杯</p><p><strong>糖浆：</strong></p><p>水                                          50克</p><p>白砂糖                                   75克</p><p><strong>抹茶液：</strong>                </p><p>抹茶粉                                   9克</p><p>糖浆                                      45克</p><p>水                                            220克</p><p><del>然后就没了？？？？？</del><u>人家也不想吗，可是没办法，我就是数学差嘛</u></p><p>9+45+220=<del>264</del>   好像是274，不重要啦</p><p>剩下的236克可以加牛奶或者咖啡，作为狼灭的我，加过红酒和啤酒，妈的绝了，差点把我送走。</p><p>来个简化版，抹茶粉加水加糖，味道看运气。其实还不错。    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;茶茶茶&quot;&gt;&lt;a href=&quot;#茶茶茶&quot; class=&quot;headerlink&quot; title=&quot;茶茶茶&quot;&gt;&lt;/a&gt;茶茶茶&lt;/h3&gt;&lt;p&gt;在twitter上看到的日本网友分享的泡茶方法：&lt;/p&gt;
&lt;p&gt;​      在小茶壶中放入茶叶和冰块（冰块代替水），放入冰箱冷藏一
      
    
    </summary>
    
    
      <category term="生活" scheme="http://isk.ink/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://isk.ink/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>【博客】 博客搭建——踩坑</title>
    <link href="http://isk.ink/2020/05/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E8%B8%A9%E5%9D%91/"/>
    <id>http://isk.ink/2020/05/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E8%B8%A9%E5%9D%91/</id>
    <published>2020-05-15T16:36:08.000Z</published>
    <updated>2020-06-06T14:57:43.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>1.下载 node.js (windows)  –windows安装完可能要重启电脑–</p><p>2.下载git并配置环境我参考的是CSDN大佬<a href="https://blog.csdn.net/huangqqdy/article/details/83032408?utm_source=app" target="_blank" rel="noopener">https://blog.csdn.net/huangqqdy/article/details/83032408?utm_source=app</a></p><p>3.linux系统需要进入root（管理员权限）</p><p>windows系统进入命令窗口（cmd）<!--管理员权限-->，然后输入“<code>node  -v</code>”查看版本，接着<code>npm  -v</code>看版本      <!--其实这一些版本查看也可以省略--></p><p>4.（在命令窗口）下载镜像源，借用淘宝的镜像源，中国有互联网局域网限制下载外国的东西会很慢，有的比百度云都慢（不是我黑百度云）在命令窗口中输入<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>5.（在命令窗口）输入命令框中输入<code>cnpm</code>查看效果，接着<code>cnpm -v</code>查看版本</p><p>6.下载文档编辑器。个人推荐Typora，功能不错，注意下载时生成鼠标右键快捷方式。</p><h2 id="下载博客框架"><a href="#下载博客框架" class="headerlink" title="下载博客框架"></a>下载博客框架</h2><p>1.我所采用的是hexo博客框架，个人没用过wordpress框架，当然你也可以选择，还有很多看自己喜欢</p><p>（在命令窗口）输入<code>cnpm install -g hexo-cli</code>等待下载，下载完后输入hexo -v查看版本</p><p>2.新建立新文件夹命名blog（windows直接右键添加），个人建议建在C盘用户目录下，其实不用担心C盘爆满，毕竟博客大多是文字，占不了多少。<strong>万一一会搭建博客出了什么问题，直接把blog文件删掉重来</strong></p><p>3.（在命令窗口）进入blog文件夹，一般打开cmd是在用户名文件下，新建的文件通过<code>cd blog</code>命令进入</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145905.png" alt=""></p><p>4.（在获得管理员权限命令窗口）生成博客，初始化博客输入<code>hexo init</code>  {这里我有些遗忘，好像需要给git配置一下环境，我加在了上面下载git的部分},如何看是否生成成功呢，windows直接进入前面新建的名为blog的文件夹看是否有许多文件生成。</p><p>5.（在命令窗口）生成博客，输入<code>hexo s</code>,等待，复制生成的<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>  进入看是否生成博客。</p><p>6.然后ctrl+c断开，输入Y，这时应该在blog目录下，比如我的</p><p><code>C:\Users\Asaki\blog&gt;</code></p><p>此时你刚进入的网页（<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ）刷新就没了，不过没关系，那只是本地生成了而已，再来一遍hexo s又出来了。</p><h1 id="写博文"><a href="#写博文" class="headerlink" title="写博文"></a>写博文</h1><p>在blog目录下，你的黑色命令行如果关掉的话，打开时是在用户目录下的，需要<code>cd blog</code>进入博客目录</p><p>1.在blog文件夹下输入<code>hexo n “你的文章主题</code>，注意n和”之间有空格，回车后生成<code>INFO Created: /user/Asaki/blog/soure/_posts/你的文章主题.md</code></p><p>,此时windows可以进入C盘的用户中blog里找到soure/_posts/，然后你会看到你生成的博文主题，对它右键用Typora打开  <!--前面提到过，记得吗？-->你就可以写东西了，具体怎么用请百度，Typora有代码命令也可以学习一下，写完后呢保存一下。</p><p>2.回到cmd命令框，此时还是在blog目录下，输入<code>hexo g</code>（生成），然后<code>hexo s</code>（本地查看），</p><p>3.因为博客在本地生成了，只有自己看的到，没什么用啊。所以要部署到远端（网页）上，借用github的服务器，有钱你可以用阿里云的，或者腾讯云的服务器，当然我喜欢白嫖，所以免费的真香</p><p>4.github的流程（懒得写，抄的<a href="https://xujun.blog.csdn.net/article/details/53576018?utm_source=app）" target="_blank" rel="noopener">https://xujun.blog.csdn.net/article/details/53576018?utm_source=app）</a></p><p>github账户的注册和配置<br>如果已经拥有账号，请跳过此步~</p><p>第一步: Github注册</p><p>打开<a href="https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码。" target="_blank" rel="noopener">https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码。</a></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145915.png" alt="image-20200516024623300"></p><p>然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。</p><p>一定要确认注册，否则无法使用gh-pages！</p><p>第二步: 创建代码库</p><p>登陆之后，点击页面右上角的加号，选择New repository：</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145931.png" alt=""></p><p>新建代码库</p><p>进入代码库创建页面：</p><p>在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示：</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525145946.png" alt="image-20200516024851491"></p><p>注意：比如我的github名称是Yaoguang161 ,这里你就填 Yaoguang161.github.io,如果你的名字是ASAKI，那你就填 ASAKI.github.io   <strong>一定注意是你的注册昵称加github.io</strong>       不要用中文昵称，我注册过了所以，显示警告重复名。</p><p>第三步: . 代码库设置github.io</p><p>正确创建之后，你将会看到如下界面：</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525150005.jpg" alt=""></p><p>接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图：</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200525150020.jpg" alt=""></p><p>Github pages</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20200516025906.jpg" alt=""></p><p>点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。</p><h1 id="部署远端"><a href="#部署远端" class="headerlink" title="部署远端"></a>部署远端</h1><p>1.在命令窗口中（blog目录下），用<code>hexo -g</code>,<code>hexo -s</code>,<code>hexo -d</code>,一套服务，当然在此之前也可以用<code>hexo clean</code>清理下生成的多余辣鸡文件，然后输入你的网址，及github上的昵称，比如我的<code>Yaoguang161.github.io</code>，如果有网页404那就再等待一会儿</p><p>2.能进入后博客，基本搭建完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;p&gt;1.下载 node.js (windows)  –windows安装完可能要重启电脑–&lt;/p&gt;
&lt;p&gt;2.下载git并配置环
      
    
    </summary>
    
    
      <category term="hexo博客" scheme="http://isk.ink/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://isk.ink/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>我让你点了吗？</title>
    <link href="http://isk.ink/2020/04/22/%E6%88%91%E8%AE%A9%E4%BD%A0%E7%82%B9%E4%BA%86%E5%90%97%EF%BC%9F/"/>
    <id>http://isk.ink/2020/04/22/%E6%88%91%E8%AE%A9%E4%BD%A0%E7%82%B9%E4%BA%86%E5%90%97%EF%BC%9F/</id>
    <published>2020-04-22T07:53:15.000Z</published>
    <updated>2020-05-25T07:05:00.958Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yaoguang161&#x2F;image&#x2F;wenzhangbeijing.jpg)</span><br><span class="line">模板：就完了  https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh</span><br><span class="line">用户名：Yaoguang161</span><br><span class="line">仓库名：image</span><br><span class="line">图片名：weizhangbeijing.jpg</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/wenzhangbeijing.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
